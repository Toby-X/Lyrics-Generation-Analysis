Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
idx.est
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
library(Boom)
library(RSpectra)
library(tidyverse)
# initialization
N = 500
I = 500
## K = 2 case
set.seed(326)
K = 5
al = rep(1,K)
Pi.r = matrix(rep(0,N*K),nrow=N)
Theta.r = matrix(rep(0,I*K),nrow=I)
for (j in 1:K) {
Theta.r[,j] = runif(I,(j-1)/K,j/K)
}
c = rdirichlet(1,al)
c = cumsum(c)
for (i in 1:N) {
a = runif(1)
if (a<c[1]){
Pi.r[i,1] = 1
} else if (a<c[2]) {
Pi.r[i,2] = 1
} else if (a<c[3]) {
Pi.r[i,3] = 1
} else if (a<c[4]) {
Pi.r[i,4] = 1
} else {
Pi.r[i,5] = 1
}
}
P.r = Pi.r%*%t(Theta.r)
idx.ori = order(colMeans(Pi.r))
X = matrix(rbinom(N*I,1,P.r),nrow=N)
XX = X%*%t(X)
D = rowSums(XX)
L = diag((D+1e-14)^(-1/2))%*%XX%*%diag((D+1e-14)^(-1/2))
L.evd = eigen(L)
L.cluster = kmeans(L.evd$vectors[,1:4],K,iter.max = 1e2, nstart=30,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
L.cluster = kmeans(L.evd$vectors[,1:5],K,iter.max = 1e2, nstart=30,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
L.cluster = kmeans(L.evd$vectors[,1:6],K,iter.max = 1e2, nstart=30,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
# D = rowSums(XX)
# L = diag(D^(-1/2))%*%XX%*%diag(D^(-1/2))
# L.off = L-diag(diag(L))
L.off.evd = eigen(XX)
L.off.cluster = kmeans(L.off.evd$vectors[,1:6],K,iter.max = 1e2, nstart=100,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.off.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.off.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.off.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.off.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.off.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
L.off.cluster = kmeans(L.off.evd$vectors[,1:5],K,iter.max = 1e2, nstart=100,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.off.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.off.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.off.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.off.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.off.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
plot(L.off.evd$values)
plot(L.off.evd$values[-1])
L.off.cluster = kmeans(L.off.evd$vectors[,1:4],K,iter.max = 1e2, nstart=100,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.off.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.off.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.off.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.off.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.off.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
L.off.cluster = kmeans(L.off.evd$vectors[,1:5],K,iter.max = 1e2, nstart=100,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.off.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.off.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.off.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.off.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.off.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
L.off.cluster = kmeans(L.off.evd$vectors[,1:2],K,iter.max = 1e2, nstart=100,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.off.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.off.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.off.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.off.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.off.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
XX.off = XX-diag(diag(XX))
# D = rowSums(XX.off)
# L = diag(D^(-1/2))%*%XX%*%diag(D^(-1/2))
# L.off = L-diag(diag(L))
L.off.evd = svd(XX.off)
L.off.cluster = kmeans(L.off.evd$u[,1:5],K,iter.max = 1e2, nstart=100,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.off.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.off.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.off.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.off.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.off.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
plot(L.off.evd$d)
plot(L.off.evd$d[-1])
XX.off = XX-diag(diag(XX))
D = rowSums(XX.off)
L = diag((D+1e-14)^(-1/2))%*%XX.off%*%diag((D+1e-14)^(-1/2))
L.evd = eigen(L)
L.cluster = kmeans(L.evd$vectors[,1:5],K,iter.max = 1e2, nstart=100,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
knitr::opts_chunk$set(echo = TRUE)
brewer = read.table("brewer_data.txt",header=T,sep = "\t")
reviewer = read.table("reviewer_data.txt",header=T)
library(tidyverse)
brewer.dist = dist(brewer[,4:7],method = "euclidean")
hclust.complete = hclust(brewer.dist,method = "complete")
idx = cutree(hclust.complete,k=20)
plot(hclust.complete)
summary(as.factor(idx))
summary(as.factor(brewer$style))
hclust.single = hclust(brewer.dist,method = "single")
idx = cutree(hclust.single,k=20)
plot(hclust.single)
summary(as.factor(idx))
hclust.average = hclust(brewer.dist,method = "average")
idx = cutree(hclust.average,k=20)
plot(hclust.average)
idx = cutree(hclust.average,k=20)
summary(as.factor(idx))
hclust.median = hclust(brewer.dist,method = "median")
idx = cutree(hclust.median,k=20)
plot(hclust.median)
summary(as.factor(idx))
hclust.centroid = hclust(brewer.dist,method = "centroid")
idx = cutree(hclust.centroid,k=20)
plot(hclust.centroid)
idx = cutree(hclust.centroid,k=20)
summary(as.factor(idx))
hclust.mcquitty = hclust(reviewer.dist,method = "mcquitty")
brewer.dist = dist(brewer[,4:7],method = "euclidean")
reviewer.dist = dist(reviewer[,2:5],method = "euclidean")
hclust.complete = hclust(brewer.dist,method = "complete")
idx = cutree(hclust.complete,k=20)
plot(hclust.complete)
hclust.mcquitty = hclust(reviewer.dist,method = "mcquitty")
idx = cutree(hclust.mcquitty,k=3)
plot(hclust.mcquitty)
hclust.ward.D2 = hclust(reviewer.dist,method = "ward.D2")
idx = cutree(hclust.ward.D2,k=3)
plot(hclust.ward.D2)
hclust.mcquitty = hclust(brewer.dist,method = "mcquitty")
idx = cutree(brewer.mcquitty,k=20)
hclust.mcquitty = hclust(brewer.dist,method = "mcquitty")
idx = cutree(hclust.mcquitty,k=20)
plot(hclust.mcquitty)
summary(as.factor(idx))
?dist
reticulate::repl_python()
install.packages("topicmodels")
library(topicmodels)
install.packages("textmineR")
setwd("D:/Programmes/Python/Lyrics-Generation-Analysis")
#-*-coding:utf-8-*-
dat_train = read.csv("data/train_tfidf_data.csv")
dat_train = dat_train[,-1]
dat_test = read.csv("data/test_tfidf_data.csv")
dat_test = dat_test[,-1]
library(glmnet)
err_cal <- function(pred,k){
sum(abs(as.numeric(pred)-dat_train[idx==k,ncol(dat_train)]))/sum(idx==k)
}
err = matrix(rep(0,length(a)*length(lam)),nrow=length(a))
# base model
# perform cross validation on elastic net
a = seq(from=0,to=1,length=1e2)
lam = log(seq(from = exp(0), to = exp(.5), length=500))
idx = rep(1:5,length.out=nrow(dat_train))
set.seed(516)
idx = sample(idx)
err = matrix(rep(0,length(a)*length(lam)),nrow=length(a))
err.tmp = matrix(rep(0,5*length(lam)),nrow=5)
for (i in 1:length(a)){
for (k in 1:5){
mr.tmp = glmnet(data.matrix(dat_train[idx!=k,-ncol(dat_train)]),as.factor(dat_train[idx!=k,ncol(dat_train)])
,family="multinomial",alpha = a[i],lambda = lam)
pre.tmp = predict(mr.tmp,data.matrix(dat_train[idx==k,-ncol(dat_train)]),type="class")
err.tmp[k,] = apply(pre.tmp,2,err_cal,k=1)
}
err[i,] = colMeans(err.tmp)
}
#-*-coding:utf-8-*-
dat_train = read.csv("data/train_tfidf_data.csv")
dat_train = dat_train[,-1]
dat_test = read.csv("data/test_tfidf_data.csv")
dat_test = dat_test[,-1]
#-*-coding:utf-8-*-
dat_train = read.csv("data/train_tfidf_data.csv")
dat_train = dat_train[,-1]
dat_test = read.csv("data/test_tfidf_data.csv")
dat_test = dat_test[,-1]
View(dat_test)
# base model
# perform cross validation on elastic net
a = seq(from=0,to=1,length=1e2)
lam = log(seq(from = exp(0), to = exp(.5), length=500))
idx = rep(1:5,length.out=nrow(dat_train))
set.seed(516)
idx = sample(idx)
err_cal <- function(pred,k){
sum(abs(as.numeric(pred)-dat_train[idx==k,ncol(dat_train)]))/sum(idx==k)
}
err = matrix(rep(0,length(a)*length(lam)),nrow=length(a))
err.tmp = matrix(rep(0,5*length(lam)),nrow=5)
for (i in 1:length(a)){
for (k in 1:5){
mr.tmp = glmnet(data.matrix(dat_train[idx!=k,-ncol(dat_train)]),as.factor(dat_train[idx!=k,ncol(dat_train)])
,family="multinomial",alpha = a[i],lambda = lam)
pre.tmp = predict(mr.tmp,data.matrix(dat_train[idx==k,-ncol(dat_train)]),type="class")
err.tmp[k,] = apply(pre.tmp,2,err_cal,k=1)
}
err[i,] = colMeans(err.tmp)
}
plot(a,rowSums(err))
plot(a[1:5],rowSums(err)[1:5])
# base model
# perform cross validation on elastic net
a = seq(from=0,to=.02,length=50)
plot(lam,err[1,])
plot(lam,err[2,])
# base model
# perform cross validation on elastic net
a = seq(from=0,to=.02,length=50)
lam = log(seq(from = exp(0.4), to = exp(.8), length=100))
idx = rep(1:5,length.out=nrow(dat_train))
set.seed(516)
idx = sample(idx)
err_cal <- function(pred,k){
sum(abs(as.numeric(pred)-dat_train[idx==k,ncol(dat_train)]))/sum(idx==k)
}
err = matrix(rep(0,length(a)*length(lam)),nrow=length(a))
err.tmp = matrix(rep(0,5*length(lam)),nrow=5)
for (i in 1:length(a)){
for (k in 1:5){
mr.tmp = glmnet(data.matrix(dat_train[idx!=k,-ncol(dat_train)]),as.factor(dat_train[idx!=k,ncol(dat_train)])
,family="multinomial",alpha = a[i],lambda = lam)
pre.tmp = predict(mr.tmp,data.matrix(dat_train[idx==k,-ncol(dat_train)]),type="class")
err.tmp[k,] = apply(pre.tmp,2,err_cal,k=1)
}
err[i,] = colMeans(err.tmp)
}
10%10
10%%10
11%%10
10//10
10/11
10%/%11
for (i in 1:length(a)){
for (k in 1:5){
mr.tmp = glmnet(data.matrix(dat_train[idx!=k,-ncol(dat_train)]),as.factor(dat_train[idx!=k,ncol(dat_train)])
,family="multinomial",alpha = a[i],lambda = lam)
pre.tmp = predict(mr.tmp,data.matrix(dat_train[idx==k,-ncol(dat_train)]),type="class")
err.tmp[k,] = apply(pre.tmp,2,err_cal,k=1)
}
err[i,] = colMeans(err.tmp)
if (is.integer(i/10)){
cat("finished",i/10*100,"\%")
err = matrix(rep(0,length(a)*length(lam)),nrow=length(a))
err.tmp = matrix(rep(0,5*length(lam)),nrow=5)
for (i in 1:length(a)){
for (k in 1:5){
mr.tmp = glmnet(data.matrix(dat_train[idx!=k,-ncol(dat_train)]),as.factor(dat_train[idx!=k,ncol(dat_train)])
,family="multinomial",alpha = a[i],lambda = lam)
pre.tmp = predict(mr.tmp,data.matrix(dat_train[idx==k,-ncol(dat_train)]),type="class")
err.tmp[k,] = apply(pre.tmp,2,err_cal,k=1)
}
err[i,] = colMeans(err.tmp)
if (is.integer(i/10)){
cat("finished",i/10*100,"%")
}
}
plot(a,rowSums(err))
err_cal <- function(pred,k){
sum(as.numeric(pred)==dat_train[idx==k,ncol(dat_train)])/sum(idx==k)
}
for (k in 1:5){
mr.tmp = glmnet(data.matrix(dat_train[idx!=k,-ncol(dat_train)]),as.factor(dat_train[idx!=k,ncol(dat_train)])
,family="multinomial",alpha = a[i],lambda = lam)
pre.tmp = predict(mr.tmp,data.matrix(dat_train[idx==k,-ncol(dat_train)]),type="class")
err.tmp[k,] = apply(pre.tmp,2,err_cal,k=1)
}
err[i,] = colMeans(err.tmp)
err[i,]
for (i in 1:length(a)){
for (k in 1:5){
mr.tmp = glmnet(data.matrix(dat_train[idx!=k,-ncol(dat_train)]),as.factor(dat_train[idx!=k,ncol(dat_train)])
,family="multinomial",alpha = a[i],lambda = lam)
pre.tmp = predict(mr.tmp,data.matrix(dat_train[idx==k,-ncol(dat_train)]),type="class")
err.tmp[k,] = apply(pre.tmp,2,err_cal,k=1)
}
err[i,] = colMeans(err.tmp)
}
plot(a,rowSums(err))
plot(a,rowMeans(err))
install.packages("plot3D")
library(plot3D)
scatter3D(a,lam,err)
persp(a,lam,err)
