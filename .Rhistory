L = diag((D+1e-14)^(-1/2))%*%XX%*%diag((D+1e-14)^(-1/2))
L.evd = eigen(L)
L.cluster = kmeans(L.evd$vectors[,1:4],K,iter.max = 1e2, nstart=30,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
L.cluster = kmeans(L.evd$vectors[,1:5],K,iter.max = 1e2, nstart=30,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
L.cluster = kmeans(L.evd$vectors[,1:6],K,iter.max = 1e2, nstart=30,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
# D = rowSums(XX)
# L = diag(D^(-1/2))%*%XX%*%diag(D^(-1/2))
# L.off = L-diag(diag(L))
L.off.evd = eigen(XX)
L.off.cluster = kmeans(L.off.evd$vectors[,1:6],K,iter.max = 1e2, nstart=100,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.off.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.off.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.off.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.off.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.off.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
L.off.cluster = kmeans(L.off.evd$vectors[,1:5],K,iter.max = 1e2, nstart=100,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.off.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.off.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.off.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.off.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.off.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
plot(L.off.evd$values)
plot(L.off.evd$values[-1])
L.off.cluster = kmeans(L.off.evd$vectors[,1:4],K,iter.max = 1e2, nstart=100,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.off.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.off.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.off.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.off.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.off.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
L.off.cluster = kmeans(L.off.evd$vectors[,1:5],K,iter.max = 1e2, nstart=100,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.off.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.off.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.off.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.off.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.off.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
L.off.cluster = kmeans(L.off.evd$vectors[,1:2],K,iter.max = 1e2, nstart=100,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.off.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.off.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.off.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.off.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.off.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
XX.off = XX-diag(diag(XX))
# D = rowSums(XX.off)
# L = diag(D^(-1/2))%*%XX%*%diag(D^(-1/2))
# L.off = L-diag(diag(L))
L.off.evd = svd(XX.off)
L.off.cluster = kmeans(L.off.evd$u[,1:5],K,iter.max = 1e2, nstart=100,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.off.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.off.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.off.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.off.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.off.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
plot(L.off.evd$d)
plot(L.off.evd$d[-1])
XX.off = XX-diag(diag(XX))
D = rowSums(XX.off)
L = diag((D+1e-14)^(-1/2))%*%XX.off%*%diag((D+1e-14)^(-1/2))
L.evd = eigen(L)
L.cluster = kmeans(L.evd$vectors[,1:5],K,iter.max = 1e2, nstart=100,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
knitr::opts_chunk$set(echo = TRUE)
brewer = read.table("brewer_data.txt",header=T,sep = "\t")
reviewer = read.table("reviewer_data.txt",header=T)
library(tidyverse)
brewer.dist = dist(brewer[,4:7],method = "euclidean")
hclust.complete = hclust(brewer.dist,method = "complete")
idx = cutree(hclust.complete,k=20)
plot(hclust.complete)
summary(as.factor(idx))
summary(as.factor(brewer$style))
hclust.single = hclust(brewer.dist,method = "single")
idx = cutree(hclust.single,k=20)
plot(hclust.single)
summary(as.factor(idx))
hclust.average = hclust(brewer.dist,method = "average")
idx = cutree(hclust.average,k=20)
plot(hclust.average)
idx = cutree(hclust.average,k=20)
summary(as.factor(idx))
hclust.median = hclust(brewer.dist,method = "median")
idx = cutree(hclust.median,k=20)
plot(hclust.median)
summary(as.factor(idx))
hclust.centroid = hclust(brewer.dist,method = "centroid")
idx = cutree(hclust.centroid,k=20)
plot(hclust.centroid)
idx = cutree(hclust.centroid,k=20)
summary(as.factor(idx))
hclust.mcquitty = hclust(reviewer.dist,method = "mcquitty")
brewer.dist = dist(brewer[,4:7],method = "euclidean")
reviewer.dist = dist(reviewer[,2:5],method = "euclidean")
hclust.complete = hclust(brewer.dist,method = "complete")
idx = cutree(hclust.complete,k=20)
plot(hclust.complete)
hclust.mcquitty = hclust(reviewer.dist,method = "mcquitty")
idx = cutree(hclust.mcquitty,k=3)
plot(hclust.mcquitty)
hclust.ward.D2 = hclust(reviewer.dist,method = "ward.D2")
idx = cutree(hclust.ward.D2,k=3)
plot(hclust.ward.D2)
hclust.mcquitty = hclust(brewer.dist,method = "mcquitty")
idx = cutree(brewer.mcquitty,k=20)
hclust.mcquitty = hclust(brewer.dist,method = "mcquitty")
idx = cutree(hclust.mcquitty,k=20)
plot(hclust.mcquitty)
summary(as.factor(idx))
?dist
reticulate::repl_python()
install.packages("topicmodels")
library(topicmodels)
install.packages("textmineR")
#-*-coding:utf-8-*-
library(xgboost)
dat_train = read.csv("data/train_data_all.csv")
dat_train = dat_train[,-c(1,2)]
dat_test = read.csv("data/test_data_all.csv")
dat_test = dat_test[,-c(1,2)]
train_other = read.csv("data/train_other.csv")
setwd("D:/Programmes/Python/Lyrics-Generation-Analysis")
dat_train = read.csv("data/train_data_all.csv")
dat_train = dat_train[,-c(1,2)]
dat_test = read.csv("data/test_data_all.csv")
dat_test = dat_test[,-c(1,2)]
train_other = read.csv("data/train_other.csv")
dat_train$new_label = 0
dat_train[,-ncol(dat_train)]
dat_train = dat_train[,-ncol(dat_train)]
bstSparse = xgboost(data=data.matrix(dat_train[,14:(ncol(dat_train)-8)]),label=data.matrix(dat_train[,ncol(dat_train)])
,max.depth=8,min_child_weight=3,eta=.2,nthread=6,nrounds = 2,objective="multi:softmax",num_class=6)
pre = predict(bstSparse,data.matrix(dat_test[,14:(ncol(dat_train)-8)]))
mean(pre==dat_test[,ncol(dat_test)])
bstSparse = xgboost(data=data.matrix(dat_train[,-(ncol(dat_train))]),label=data.matrix(dat_train[,ncol(dat_train)])
,max.depth=6,min_child_weight=2,eta=.2,nthread=6,nrounds = 2,objective="multi:softmax",num_class=6)
pre = predict(bstSparse,data.matrix(dat_test[,-(ncol(dat_train))]))
mean(pre==dat_test[,ncol(dat_test)])
dat_train$new_label = 0
dat_test$new_label = 0
for (i in 3:5) {
dat_train$new_label[dat_train$label.1==i] = i-2
dat_test$new_label[dat_test$label.1==i] = i-2
}
dat_train = dat_train[,-(ncol(dat_train)-1)]
dat_test = dat_test[,-(ncol(dat_test)-1)]
bstSparse = xgboost(data=data.matrix(dat_train[,14:(ncol(dat_train)-8)]),label=data.matrix(dat_train[,ncol(dat_train)])
,max.depth=7,min_child_weight=0.7,eta=.2,nthread=6,nrounds = 2,objective="multi:softmax",num_class=4)
pre = predict(bstSparse,data.matrix(dat_test[,14:(ncol(dat_train)-8)]))
mean(pre==dat_test[,ncol(dat_test)])
bstSparse = xgboost(data=data.matrix(dat_train[,-(ncol(dat_train))]),label=data.matrix(dat_train[,ncol(dat_train)])
,max.depth=7,min_child_weight=0.7,eta=.2,nthread=6,nrounds = 2,objective="multi:softmax",num_class=4)
pre = predict(bstSparse,data.matrix(dat_test[,-(ncol(dat_train))]))
mean(pre==dat_test[,ncol(dat_test)])
#-*-coding:utf-8-*-
library(glmnet)
library(kernlab)
svm.tmp = ksvm(data.matrix(dat_train_fil[,-ncol(dat_train_fil)]),as.factor(dat_train_fil[,ncol(dat_train_fil)]),
kernel="rbfdot",kpar="automatic")
svm.tmp = ksvm(data.matrix(dat_train[,-ncol(dat_train_fil)]),as.factor(dat_train[,ncol(dat_train_fil)]),
kernel="rbfdot",kpar="automatic")
svm.tmp = ksvm(data.matrix(dat_train[,-ncol(dat_train)]),as.factor(dat_train[,ncol(dat_train)]),
kernel="rbfdot",kpar="automatic")
pred = predict(svm.tmp,dat_test[,-ncol(dat_test)],type="response")
mean(pred == dat_test_fil[,ncol(dat_test_fil)])
mean(pred == dat_test[,ncol(dat_test)])
dat_train$new_label = 0
dat_test$new_label = 0
for (i in 3:5) {
dat_train$new_label[dat_train$label.1==i] = i-2
dat_test$new_label[dat_test$label.1==i] = i-2
}
dat_train = dat_train[,-(ncol(dat_train)-1)]
dat_test = dat_test[,-(ncol(dat_test)-1)]
svm.tmp = ksvm(data.matrix(dat_train[,-ncol(dat_train)]),as.factor(dat_train[,ncol(dat_train)]),
kernel="rbfdot",kpar="automatic")
max(dat_train$new_label)
for (i in 3:5) {
dat_train$new_label[dat_train$label.1==i] = i-2
dat_test$new_label[dat_test$label.1==i] = i-2
}
max(dat_train$new_label)
dat_train = read.csv("data/train_data_all.csv")
dat_train = dat_train[,-c(1,2)]
dat_test = read.csv("data/test_data_all.csv")
dat_test = dat_test[,-c(1,2)]
train_other = read.csv("data/train_other.csv")
dat_train$new_label = 0
dat_test$new_label = 0
for (i in 3:5) {
dat_train$new_label[dat_train$label.1==i] = i-2
dat_test$new_label[dat_test$label.1==i] = i-2
}
dat_train = dat_train[,-(ncol(dat_train)-1)]
dat_test = dat_test[,-(ncol(dat_test)-1)]
var_max = max(dat_train[,14:(ncol(dat_train)-1)],axis=1)
dat_train[,14:(ncol(dat_train)-1)] = t(t(dat_train[,14:(ncol(dat_train)-1)])/var_max)
dat_test[,14:(ncol(dat_test)-1)] = t(t(dat_test[,14:(ncol(dat_test)-1)])/var_max)
svm.tmp = ksvm(data.matrix(dat_train[,-ncol(dat_train)]),as.factor(dat_train[,ncol(dat_train)]),
kernel="rbfdot",kpar="automatic")
pred = predict(svm.tmp,dat_test[,-ncol(dat_test)],type="response")
mean(pred == dat_test[,ncol(dat_test)])
max(dat_train$new_label)
dat_train = read.csv("data/train_data_all.csv")
dat_train = dat_train[,-c(1,2)]
dat_test = read.csv("data/test_data_all.csv")
dat_test = dat_test[,-c(1,2)]
train_other = read.csv("data/train_other.csv")
var_max = max(dat_train[,14:(ncol(dat_train)-1)],axis=1)
dat_train[,14:(ncol(dat_train)-1)] = t(t(dat_train[,14:(ncol(dat_train)-1)])/var_max)
dat_test[,14:(ncol(dat_test)-1)] = t(t(dat_test[,14:(ncol(dat_test)-1)])/var_max)
svm.tmp = ksvm(data.matrix(dat_train[,-ncol(dat_train)]),as.factor(dat_train[,ncol(dat_train)]),
kernel="rbfdot",kpar="automatic")
pred = predict(svm.tmp,dat_test[,-ncol(dat_test)],type="response")
mean(pred == dat_test[,ncol(dat_test)])
#-*- coding:utf-8 -*-
library(torch)
library(topicmodels.etm)
library(doc2vec)
library(word2vec)
library(data.table)
dat = fread("data/df_cluster.csv")
x = data.frame(song_id = dat$song_id,
lyrics = dat$lyrics,
stringsAsFactors = F)
x$lyrics = txt_clean_word2vec(x$lyrics)
w2v = word2vec(x=x$lyrics,dim=50,type = "skip-gram",
iter=30, min_count = 20, threads = 6)
embeddings = as.matrix(w2v)
predict(w2v,newdata=c("way","weave"),
type="nearest",top_n=4)
library(udpipe)
dtm = strsplit.data.frame(x,group="song_id",term="lyrics",split=" ")
dtm = document_term_frequencies(dtm)
dtm = document_term_matrix(dtm,prob=.5)
vocab = intersect(rownames(embeddings),colnames(dtm))
embeddings = dtm_conform(embeddings,rows=vocab)
dtm = dtm_conform(dtm,columns = vocab)
set.seed(1234)
torch_manual_seed(4321)
model = ETM(k=250, dim=800, embeddings = embeddings)
optimizer = optim_adam(params=model$parameters,lr=.005,weight_decay = .0000012)
loss = model$fit(data=dtm,optimizer = optimizer,epoch=20,batch_size = 1e3)
plot(model, type = "loss")
terminology = predict(model,type="terms",top_n = 20)
library(textplot)
library(uwot)
library(ggrepel)
library(ggalt)
manifolded <- summary(model, type = "umap", n_components = 2, metric = "cosine", n_neighbors = 15,
fast_sgd = FALSE, n_threads = 2, verbose = TRUE)
space      <- subset(manifolded$embed_2d, type %in% "centers")
textplot_embedding_2d(space)
space      <- subset(manifolded$embed_2d, rank <= 15)
textplot_embedding_2d(space, title = "ETM topics", subtitle = "embedded in 2D using UMAP",
encircle = F, points = TRUE)
space      <- subset(manifolded$embed_2d, rank <= 15)
?ridge
?glm
dat_train = read.csv("data/train_data_all.csv")
dat_train = dat_train[,-c(1,2)]
dat_test = read.csv("data/test_data_all.csv")
dat_test = dat_test[,-c(1,2)]
train_other = read.csv("data/train_other.csv")
dat_train$new_label = 0
dat_test$new_label = 0
dat_train$new_label[dat_train$label.1==3|dat_train$label.1==4|dat_train$label.1==5] = 1
dat_test$new_label[dat_test$label.1==3|dat_test$label.1==4|dat_test$label.1==5] = 1
# for (i in 3:5) {
#   dat_train$new_label[dat_train$label.1==i] = i-2
#   dat_test$new_label[dat_test$label.1==i] = i-2
# }
dat_train = dat_train[,-(ncol(dat_train)-1)]
dat_test = dat_test[,-(ncol(dat_test)-1)]
bstSparse = xgboost(data=data.matrix(dat_train[,-(ncol(dat_train))]),label=data.matrix(dat_train[,ncol(dat_train)])
,max.depth=6,min_child_weight=2,eta=.2,nthread=6,nrounds = 2,objective="multi:softmax",num_class=6)
pre = predict(bstSparse,data.matrix(dat_test[,-(ncol(dat_train))]))
mean(pre==dat_test[,ncol(dat_test)])
svm.tmp = ksvm(data.matrix(dat_train[,-ncol(dat_train)]),as.factor(dat_train[,ncol(dat_train)]),
kernel="rbfdot",kpar="automatic")
pred = predict(svm.tmp,dat_test[,-ncol(dat_test)],type="response")
mean(pred == dat_test[,ncol(dat_test)])
# library(data.table)
# library(tictoc)
# library(parallel)
# library(foreach)
# library(doSNOW)
# numCores = 6
# cl = makeCluster(numCores)
# registerDoSNOW(cl)
dat_train = read.csv("data/train_data_all.csv")
dat_train = dat_train[,-c(1,2)]
dat_test = read.csv("data/test_data_all.csv")
dat_test = dat_test[,-c(1,2)]
train_other = read.csv("data/train_other.csv")
corr = apply(dat_train[,14:(ncol(dat_train)-2)],2,cor,y=train_other$active_years)
boxplot(corr)
corr = apply(dat_train[,14:(ncol(dat_train)-2)],2,cor,y=train_other$year)
boxplot(corr)
colnames(dat_train[,14:(ncol(dat_train)-2)])[which.max(corr)]
colnames(dat_train[,14:(ncol(dat_train)-2)])[order(corr)[2]]
colnames(dat_train[,14:(ncol(dat_train)-2)])[order(corr)[3]]
colnames(dat_train[,14:(ncol(dat_train)-2)])[order(corr)[4]]
colnames(dat_train[,14:(ncol(dat_train)-2)])[order(corr)[5]]
colnames(dat_train[,14:(ncol(dat_train)-2)])[length(corr)]
?boxplot
boxplot(corr)
title(main="Features vs Year")
?glmnet
