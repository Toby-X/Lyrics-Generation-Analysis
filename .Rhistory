}
}
err = err/N
err
# D = rowSums(XX)
# L = diag(D^(-1/2))%*%XX%*%diag(D^(-1/2))
# L.off = L-diag(diag(L))
L.off.evd = eigen(XX)
L.off.cluster = kmeans(L.off.evd$vectors[,1:6],K,iter.max = 1e2, nstart=100,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.off.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.off.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.off.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.off.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.off.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
L.off.cluster = kmeans(L.off.evd$vectors[,1:5],K,iter.max = 1e2, nstart=100,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.off.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.off.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.off.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.off.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.off.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
plot(L.off.evd$values)
plot(L.off.evd$values[-1])
L.off.cluster = kmeans(L.off.evd$vectors[,1:4],K,iter.max = 1e2, nstart=100,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.off.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.off.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.off.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.off.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.off.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
L.off.cluster = kmeans(L.off.evd$vectors[,1:5],K,iter.max = 1e2, nstart=100,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.off.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.off.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.off.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.off.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.off.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
L.off.cluster = kmeans(L.off.evd$vectors[,1:2],K,iter.max = 1e2, nstart=100,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.off.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.off.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.off.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.off.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.off.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
XX.off = XX-diag(diag(XX))
# D = rowSums(XX.off)
# L = diag(D^(-1/2))%*%XX%*%diag(D^(-1/2))
# L.off = L-diag(diag(L))
L.off.evd = svd(XX.off)
L.off.cluster = kmeans(L.off.evd$u[,1:5],K,iter.max = 1e2, nstart=100,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.off.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.off.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.off.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.off.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.off.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
plot(L.off.evd$d)
plot(L.off.evd$d[-1])
XX.off = XX-diag(diag(XX))
D = rowSums(XX.off)
L = diag((D+1e-14)^(-1/2))%*%XX.off%*%diag((D+1e-14)^(-1/2))
L.evd = eigen(L)
L.cluster = kmeans(L.evd$vectors[,1:5],K,iter.max = 1e2, nstart=100,algorithm = "Lloyd")
Pi.est = matrix(rep(0,N*K),nrow=N)
for (i in 1:N) {
if (L.cluster$cluster[i] == 1){
Pi.est[i,1] = 1
} else if (L.cluster$cluster[i] == 2) {
Pi.est[i,2] = 1
} else if (L.cluster$cluster[i] == 3) {
Pi.est[i,3] = 1
} else if (L.cluster$cluster[i] == 4) {
Pi.est[i,4] = 1
} else if (L.cluster$cluster[i] == 5) {
Pi.est[i,5] = 1
}
}
idx.est = order(colMeans(Pi.est))
err = 0
for (i in 1:N) {
if (any(Pi.est[i,idx.est]!=Pi.r[i,idx.ori])){
err = err+1
}
}
err = err/N
err
knitr::opts_chunk$set(echo = TRUE)
brewer = read.table("brewer_data.txt",header=T,sep = "\t")
reviewer = read.table("reviewer_data.txt",header=T)
library(tidyverse)
brewer.dist = dist(brewer[,4:7],method = "euclidean")
hclust.complete = hclust(brewer.dist,method = "complete")
idx = cutree(hclust.complete,k=20)
plot(hclust.complete)
summary(as.factor(idx))
summary(as.factor(brewer$style))
hclust.single = hclust(brewer.dist,method = "single")
idx = cutree(hclust.single,k=20)
plot(hclust.single)
summary(as.factor(idx))
hclust.average = hclust(brewer.dist,method = "average")
idx = cutree(hclust.average,k=20)
plot(hclust.average)
idx = cutree(hclust.average,k=20)
summary(as.factor(idx))
hclust.median = hclust(brewer.dist,method = "median")
idx = cutree(hclust.median,k=20)
plot(hclust.median)
summary(as.factor(idx))
hclust.centroid = hclust(brewer.dist,method = "centroid")
idx = cutree(hclust.centroid,k=20)
plot(hclust.centroid)
idx = cutree(hclust.centroid,k=20)
summary(as.factor(idx))
hclust.mcquitty = hclust(reviewer.dist,method = "mcquitty")
brewer.dist = dist(brewer[,4:7],method = "euclidean")
reviewer.dist = dist(reviewer[,2:5],method = "euclidean")
hclust.complete = hclust(brewer.dist,method = "complete")
idx = cutree(hclust.complete,k=20)
plot(hclust.complete)
hclust.mcquitty = hclust(reviewer.dist,method = "mcquitty")
idx = cutree(hclust.mcquitty,k=3)
plot(hclust.mcquitty)
hclust.ward.D2 = hclust(reviewer.dist,method = "ward.D2")
idx = cutree(hclust.ward.D2,k=3)
plot(hclust.ward.D2)
hclust.mcquitty = hclust(brewer.dist,method = "mcquitty")
idx = cutree(brewer.mcquitty,k=20)
hclust.mcquitty = hclust(brewer.dist,method = "mcquitty")
idx = cutree(hclust.mcquitty,k=20)
plot(hclust.mcquitty)
summary(as.factor(idx))
?dist
reticulate::repl_python()
install.packages("topicmodels")
library(topicmodels)
install.packages("textmineR")
#-*-coding:utf-8-*-
library(glmnet)
# library(data.table)
# library(tictoc)
# library(parallel)
# library(foreach)
# library(doSNOW)
# numCores = 6
# cl = makeCluster(numCores)
# registerDoSNOW(cl)
dat_train = read.csv("data/train_data_all.csv")
setwd("D:/Programmes/Python/Lyrics-Generation-Analysis")
# library(data.table)
# library(tictoc)
# library(parallel)
# library(foreach)
# library(doSNOW)
# numCores = 6
# cl = makeCluster(numCores)
# registerDoSNOW(cl)
dat_train = read.csv("data/train_data_all.csv")
dat_train = dat_train[,-1]
dat_test = read.csv("data/test_data_all.csv")
dat_test = dat_test[,-1]
train_other = read.csv("data/train_other.csv")
# normalization of word frequency
freq_mean = colMeans(dat_train[,14:(ncol(dat_train)-1)])
freq_sd = apply(dat_train[,14:(ncol(dat_train)-1)],2,sd)
dat_train[,14:(ncol(dat_train)-1)] = t((t(dat_train[,14:(ncol(dat_train)-1)])-freq_mean)/freq_sd)
dat_test[,14:(ncol(dat_test)-1)] = t((t(dat_test[,14:(ncol(dat_test)-1)])-freq_mean)/freq_sd)
# library(data.table)
# library(tictoc)
# library(parallel)
# library(foreach)
# library(doSNOW)
# numCores = 6
# cl = makeCluster(numCores)
# registerDoSNOW(cl)
dat_train = read.csv("data/train_data_all.csv")
dat_train = dat_train[,-1]
dat_test = read.csv("data/test_data_all.csv")
dat_test = dat_test[,-1]
# Maybe Counting on Genre
colSums(dat_train[,1:13])
colSums(dat_test[,1:13])
1283/4655
# base model
# perform cross validation on elastic net
lam = log(seq(from = exp(1e-2), to = exp(1), length=100))
idx = rep(1:5,length.out=nrow(dat_train))
set.seed(516)
idx = sample(idx)
ch2int <- function(ch){
if (ch == 'FALSE'){
return(0)
} else {
return(1)
}
}
dat_train[idx==k,"pop"]
k = 1
dat_train[idx==k,"pop"]
pred = sapply(pred, ch2int)
#10s classifier
err_cal <- function(pred,k){
pred = sapply(pred, ch2int)
mean((pred!=(dat_train[idx==k,"pop"])))
}
# Bootstrap
set.seed(k)
err.tmp = matrix(rep(0,5*length(lam)),nrow=5)
dat_train.tmp = dat_train[idx!=k,]
label_pop = dat_train.tmp$pop
idxpop = (1:length(label_pop))[label_pop==1]
bootpop = sample(idxpop,sum(label_pop!=1)/2-sum(label_pop==1),replace = T)
head(label_pop)
sum(label_pop!=1)/2-sum(label_pop==1)
bootpop = sample(idxpop,round(sum(label_pop!=1)/2)-sum(label_pop==1),replace = T)
round(sum(label_pop!=1)/2)-sum(label_pop==1)
sum(label_pop)
sum(label_pop!=1)
2367+1357
# base model
# perform cross validation on elastic net
lam = log(seq(from = exp(1e-2), to = exp(1), length=100))
idx = rep(1:5,length.out=nrow(dat_train))
set.seed(516)
idx = sample(idx)
# Bootstrap
set.seed(k)
dat_train.tmp = dat_train[idx!=k,]
label_10 = dat_train.tmp$label.1
idx10 = (1:length(label_10))[label_10==5]
boot10 = sample(idx10,sum(label_10!=5)/2-sum(label_10==5),replace = T)
dat_train_10 = rbind(dat_train.tmp,dat_train.tmp[boot10,])
# Model Estimation
mr.tmp = glmnet(data.matrix(dat_train_10[,-ncol(dat_train)]),dat_train_10[,ncol(dat_train)]==5
,family="binomial",alpha = 0,lambda = lam)
# Bootstrap
set.seed(k)
dat_train.tmp = dat_train[idx!=k,]
label_pop = dat_train.tmp$pop
idxpop = (1:length(label_pop))[label_pop==1]
bootpop = sample(idxpop,round(sum(label_pop!=1)/2)-sum(label_pop==1),replace = T)
sum(label_pop!=1)/2
sum(label_pop==1)
dat_train.tmp = dat_train[idx!=k,]
label_alternative = dat_train.tmp$alternative
idxalternative = (1:length(label_alternative))[label_alternative==1]
bootalternative = sample(idxalternative,round(sum(label_alternative!=1)/2)-sum(label_alternative==1),replace = T)
dat_train_alternative = rbind(dat_train.tmp,dat_train.tmp[bootalternative,])
# Model Estimation
mr.tmp = glmnet(data.matrix(dat_train_alternative[,-c(1:13,ncol(dat_train))]),dat_train_alternative$alternative
,family="binomial",alpha = 0,lambda = lam)
pre.tmp = predict(mr.tmp,data.matrix(dat_train[idx==k,-c(1:13,ncol(dat_train))]),type="class")
err.tmp[k,] = apply(pre.tmp,2,err_cal,k=k)
err.tmp[k,]
pre.tmp[,1]
#10s classifier
err_cal <- function(pred,k){
pred = sapply(pred, ch2int)
mean((pred!=(dat_train[idx==k,"country"])))
}
err.tmp = matrix(rep(0,5*length(lam)),nrow=5)
# Bootstrap
set.seed(k)
dat_train.tmp = dat_train[idx!=k,]
label_country = dat_train.tmp$country
idxcountry = (1:length(label_country))[label_country==1]
bootcountry = sample(idxcountry,round(sum(label_country!=1)/2)-sum(label_country==1),replace = T)
dat_train_country = rbind(dat_train.tmp,dat_train.tmp[bootcountry,])
# Model Estimation
mr.tmp = glmnet(data.matrix(dat_train_country[,-c(1:13,ncol(dat_train))]),dat_train_country$country
,family="binomial",alpha = 0,lambda = lam)
pre.tmp = predict(mr.tmp,data.matrix(dat_train[idx==k,-c(1:13,ncol(dat_train))]),type="class")
err.tmp[k,] = apply(pre.tmp,2,err_cal,k=k)
err.tmp[k,]
pre.tmp
pre.tmp[,1]
sum(pre.tmp[,1]=="1")
err.tmp = matrix(rep(0,5*length(lam)),nrow=5)
for (k in 1:5) {
# Bootstrap
set.seed(k)
dat_train.tmp = dat_train[idx!=k,]
label_country = dat_train.tmp$country
idxcountry = (1:length(label_country))[label_country==1]
bootcountry = sample(idxcountry,round(sum(label_country!=1)/2)-sum(label_country==1),replace = T)
dat_train_country = rbind(dat_train.tmp,dat_train.tmp[bootcountry,])
# Model Estimation
mr.tmp = glmnet(data.matrix(dat_train_country[,-c(1:13,ncol(dat_train))]),dat_train_country$country
,family="binomial",alpha = 0,lambda = lam)
pre.tmp = predict(mr.tmp,data.matrix(dat_train[idx==k,-c(1:13,ncol(dat_train))]),type="class")
err.tmp[k,] = apply(pre.tmp,2,err_cal,k=k)
}
plot(rev(lam),colMeans(err.tmp),"l",xlab = "lambda",ylab = "error rate")
# ridge lambda = .7
set.seed(3701)
label_10 = dat_train$label.1
idx10 = (1:length(label_10))[label_10==5]
boot10 = sample(idx10,sum(label_10!=5)/2-sum(label_10==5),replace = T)
dat_train_10 = rbind(dat_train,dat_train[boot10,])
m1 = glmnet(data.matrix(dat_train_10[,-ncol(dat_train)]),dat_train_10[,ncol(dat_train)]==5
,family="binomial",alpha = 0,lambda=.7)
pre.res = predict(m1,data.matrix(dat_test[,-ncol(dat_test)]),type = "class")
pred=  pre.res
pred = sapply(pred, ch2int)
mean((pred!=(dat_test[,ncol(dat_train_10)]==5)))
# recall
mean((pred[(dat_test[,"country"]==1)]==1)) # .05
# precision
mean((dat_test[pred==1,"country"]==1)) # .33
mean((pred!=(dat_test[,"country"]==1)))
sum(pred)
sum((dat_test[,"country"]==1))
# recall
mean((pred[(dat_test[,"country"]==1)]==1)) # .05
# precision
mean((dat_test[pred==1,"country"]==1)) # .33
#10s classifier
err_cal <- function(pred,k){
pred = sapply(pred, ch2int)
mean((pred!=(dat_train[idx==k,"country"])))
}
# Bootstrap
set.seed(k)
dat_train.tmp = dat_train[idx!=k,]
label_country = dat_train.tmp$country
idxcountry = (1:length(label_country))[label_country==1]
bootcountry = sample(idxcountry,round(sum(label_country!=1)/2)-sum(label_country==1),replace = T)
dat_train_country = rbind(dat_train.tmp,dat_train.tmp[bootcountry,])
# Model Estimation
mr.tmp = glmnet(data.matrix(dat_train_country[,-c(1:13,ncol(dat_train))]),dat_train_country$country
,family="binomial",alpha = 0,lambda = lam)
pre.tmp = predict(mr.tmp,data.matrix(dat_train[idx==k,-c(1:13,ncol(dat_train))]),type="class")
err.tmp[k,] = apply(pre.tmp,2,err_cal,k=k)
err.tmp[k,]
pred[1]
pred[1]==0
pred[1]==1
lam
dat_train.tmp$country
idxcountry
pre.res = predict(m1,data.matrix(dat_test[,-ncol(dat_test)]),type = "class")
pred=  pre.res
pred = sapply(pred, ch2int)
mean((pred!=(dat_test[,"country"]==1)))
m1 = glmnet(data.matrix(dat_train_10[,-ncol(dat_train)]),dat_train_10[,ncol(dat_train)]==5
,family="binomial",alpha = 0,lambda=.4)
pre.res = predict(m1,data.matrix(dat_test[,-ncol(dat_test)]),type = "class")
pred=  pre.res
pred = sapply(pred, ch2int)
mean((pred!=(dat_test[,"country"]==1)))
# ridge lambda = .7
set.seed(3701)
label_country = dat_train$label.1
idxcountry = (1:length(label_country))[label_country==5]
label_country = dat_train$country
idxcountry = (1:length(label_country))[label_country==1]
bootcountry = sample(idxcountry,sum(label_country!=1)/2-sum(label_country==1),replace = T)
dat_train_country = rbind(dat_train,dat_train[bootcountry,])
m1 = glmnet(data.matrix(dat_train_country[,-c(1:13,ncol(dat_train))]),dat_train_country$country
,family="binomial",alpha = 0,lambda=.4)
pre.res = predict(m1,data.matrix(dat_test[,-c(1:13,ncol(dat_test))]),type = "class")
pred=  pre.res
pred = sapply(pred, ch2int)
mean((pred!=(dat_test[,"country"]==1)))
# recall
mean((pred[(dat_test[,"country"]==1)]==1)) # .04
# precision
mean((dat_test[pred==1,"country"]==1)) # .03
head(pred)
pred
sum(pred==1)
sum(pred==0)
# Model Estimation
mr.tmp = glmnet(data.matrix(dat_train_country[,-c(1:13,ncol(dat_train))]),dat_train_country$country
,family="binomial",alpha = 0,lambda = lam)
m1 = glmnet(data.matrix(dat_train_country[,-c(1:13,ncol(dat_train))]),dat_train_country$country
,family="binomial",alpha = 0,lambda=.8)
pre.res = predict(m1,data.matrix(dat_test[,-c(1:13,ncol(dat_test))]),type = "class")
pred=  pre.res
pred = sapply(pred, ch2int)
mean((pred!=(dat_test[,"country"]==1)))
# recall
mean((pred[(dat_test[,"country"]==1)]==1)) # 1
# precision
mean((dat_test[pred==1,"country"]==1)) # .10
sum(pre.tmp[,1]==1)
sum(pre.tmp[,1]==0)
sum(pre.tmp[,2]==0)
sum(pre.tmp[,3]==0)
sum(pre.tmp[,4]==0)
pred
sum(label_country!=1)/2-sum(label_country==1)
sum(label_country!=1)
mean((pred!=(dat_test[,"country"]==1)))
pred[1]
pre.res = predict(m1,data.matrix(dat_test[,-c(1:13,ncol(dat_test))]),type = "class")
dat_test[,"country"]==1
mean((pred!=(dat_test[,"country"]==1)))
1==TRUE
1==FALSE
dat_train[,14]
dat_train[,15]
